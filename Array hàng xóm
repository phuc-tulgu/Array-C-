phuc-tulgu/Array
/*
Ở đây sẽ dạy các bạn hai thứ cần thiết đó là vòng lặp IF đừng coi thường nó
Nếu bạn dùng else if thì if trên đúng sẽ bỏ cái dưới ( điều kiện chọn loại )
Nên dùng nhiều if nếu dùng để tính điều kiện cộng ( nhiều điều kiện cần áp dụng )
Nếu thấy bài khó hãy làm như này

Bài này là viết ra ma trận rồi từ ma trận đấy có các phần tử cạnh nó( trái phải dưới trên ) nếu lớn hơn tất cả thì là 1 không thì giá trị của nó sẽ là 0

Một lời khuyên là nếu bài toán chuyển đổi các kiểu với ma trận hay gì thì nên tạo bản sao rồi từ bản sao làm không như tôi đã sai và phải ngồi sửa 10 tiếng đồng hồ
*/


//Test case copyright by Phuc PC
//5 5 
//1 3 5 6 7 7 9 4 3 -9 0 0 1 2 3 0 1 0 2 3 1 2 3 4 1
//0 0 7 0 0 0 0 7 0 1
//1 3 -7 9 9 8 7 6 1 2 5 3 -1 2 -1 2
#include<iostream>

using namespace std;

void in_put(int arr[][20], int n, int m){
	//Input
	for (int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++){
			//cout << "Enter arr["<<i<<"]["<<j<<"] : ";
			cin >> arr[i][j];
		}
	}
}

void out_put(int arr[][20], int n, int m){
	//Output
	for (int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++){
			cout << arr[i][j] << "\t";
		}
		cout << endl;
	}
}

void neighbor_matrix(int arr[][20],int arrB[][20], int n, int m){
	cout << "Matrix after changing" << endl;
	int index = 0;
	for (int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++){
			if(	(arr[i][j] > arr[i][j+1]) ){
				index ++;	cout << "Oke1" ;	//Đoạn này tôi dùng oke để in ra màn hình xem nó có thỏa mãn điều kiện này không để chuyển sang điều kiện khác
			} 
			if(( arr[i][j] > arr[i][j-1]) ){
				index ++;	cout << "Oke2" ;	
			} 
			if( (arr[i][j] > arr[i+1][j]) ){
				index ++;	cout << "Oke3" ;	
			} 
			if( (arr[i][j] > arr[i-1][j]) ){
				index ++;	cout << "Oke4" ;	
			} 
			cout << "index arr["<<i<<"]["<<j<<"] : " << index << endl;
			if(index == 4)	arrB[i][j] = 1;
			else if (index != 4)	 arrB[i][j] = 0;
			
			index = 0;
	}
}
}
int main(){
	int n,m;
	cin >> n >> m;
	int arr[20][20] = {0};
	int arrB[20][20] = {0};
	in_put(arr,n,m);
	cout << "Matrix before changing" << endl;
	out_put(arr,n,m);
	
	neighbor_matrix(arr,arrB,n,m);
	out_put(arrB,n,m);
	
}
